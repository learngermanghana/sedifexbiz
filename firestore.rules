rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function getMembership() {
      return request.auth != null
        ? get(/databases/$(database)/documents/teamMembers/$(request.auth.uid))
        : null;
    }

    function membershipExists(member) {
      return member != null && member.exists();
    }

    function stringValue(value) {
      return value is string && value != '' ? value : null;
    }

    function storeIdFromData(data) {
      return data != null
        ? (
            data.keys().hasAny(['storeId'])
              ? stringValue(data.storeId)
              : (
                  data.keys().hasAny(['storeid'])
                    ? stringValue(data.storeid)
                    : null
                )
          )
        : null;
    }

    function membershipStoreId(member) {
      return membershipExists(member) ? storeIdFromData(member.data) : null;
    }

    function membershipRole(member) {
      return membershipExists(member) ? stringValue(member.data.role) : null;
    }

    function isOwner(member) {
      return membershipRole(member) == 'owner';
    }

    function hasStaffRole(member) {
      let role = membershipRole(member);
      return role == 'owner' || role == 'staff';
    }

    function matchesMembershipStore(member, storeId) {
      let memberStore = membershipStoreId(member);
      return memberStore != null && storeId != null && memberStore == storeId;
    }

    function resourceMatchesStore(member) {
      return resource != null && matchesMembershipStore(member, storeIdFromData(resource.data));
    }

    function requestMatchesStore(member) {
      return request.resource != null
        && matchesMembershipStore(member, storeIdFromData(request.resource.data))
        && (resource == null || storeIdFromData(resource.data) == storeIdFromData(request.resource.data));
    }

    function requestHasStoreId() {
      return request.resource != null && storeIdFromData(request.resource.data) != null;
    }

    function requestHasValidRole() {
      return request.resource != null
        && request.resource.data.keys().hasAny(['role'])
        && request.resource.data.role in ['owner', 'staff'];
    }

    function canReadStoreDocument() {
      return membershipExists(getMembership()) && resourceMatchesStore(getMembership());
    }

    function canOwnerModifyStoreDocument() {
      return membershipExists(getMembership())
        && isOwner(getMembership())
        && (
          (request.resource == null && resourceMatchesStore(getMembership()))
          || requestMatchesStore(getMembership())
        );
    }

    function canStaffModifyStoreDocument() {
      return membershipExists(getMembership())
        && hasStaffRole(getMembership())
        && (
          (request.resource == null && resourceMatchesStore(getMembership()))
          || requestMatchesStore(getMembership())
        );
    }

    match /teamMembers/{memberId} {
      allow read: if request.auth != null
        && resource != null
        && storeIdFromData(resource.data) != null
        && (
          request.auth.uid == memberId
          || (
            membershipExists(getMembership())
              && isOwner(getMembership())
              && matchesMembershipStore(getMembership(), storeIdFromData(resource.data))
          )
        );

      allow create: if request.auth != null
        && request.resource != null
        && storeIdFromData(request.resource.data) != null
        && requestHasValidRole()
        && (
          (
            membershipExists(getMembership())
              && isOwner(getMembership())
              && matchesMembershipStore(getMembership(), storeIdFromData(request.resource.data))
          )
          || (
            request.auth.uid == memberId
            && request.resource.data.role == 'owner'
          )
        );

      allow update: if request.auth != null
        && request.resource != null
        && resource != null
        && storeIdFromData(request.resource.data) == storeIdFromData(resource.data)
        && requestHasValidRole()
        && (
          membershipExists(getMembership())
            && isOwner(getMembership())
            && matchesMembershipStore(getMembership(), storeIdFromData(resource.data))
        );

      allow delete: if request.auth != null
        && resource != null
        && (
          membershipExists(getMembership())
            && isOwner(getMembership())
            && matchesMembershipStore(getMembership(), storeIdFromData(resource.data))
        );
    }

    match /stores/{storeId} {
      allow read: if (
        membershipExists(getMembership())
          && matchesMembershipStore(getMembership(), storeId)
      );

      allow write: if (
        membershipExists(getMembership())
          && isOwner(getMembership())
          && matchesMembershipStore(getMembership(), storeId)
          && (
            (request.resource == null && resource != null && storeIdFromData(resource.data) == storeId)
            || (request.resource != null && storeIdFromData(request.resource.data) == storeId)
          )
      );

      match /{document=**} {
        allow read: if canReadStoreDocument();
        allow write: if canOwnerModifyStoreDocument();
      }
    }

    match /products/{productId} {
      allow read: if canReadStoreDocument();
      allow create, update, delete: if canOwnerModifyStoreDocument();
    }

    match /customers/{customerId} {
      allow read: if canReadStoreDocument();
      allow create, update: if canOwnerModifyStoreDocument() && requestHasStoreId();
      allow delete: if canOwnerModifyStoreDocument();
    }

    match /sales/{saleId} {
      allow read: if canReadStoreDocument();
      allow create, update: if canStaffModifyStoreDocument();
      allow delete: if canOwnerModifyStoreDocument();
    }

    match /saleItems/{saleItemId} {
      allow read: if canReadStoreDocument();
      allow create, update: if canStaffModifyStoreDocument();
      allow delete: if canOwnerModifyStoreDocument();
    }

    match /receipts/{receiptId} {
      allow read: if canReadStoreDocument();
      allow create, update: if canStaffModifyStoreDocument();
      allow delete: if canOwnerModifyStoreDocument();
    }

    match /ledger/{entryId} {
      allow read: if canReadStoreDocument();
      allow create, update, delete: if canOwnerModifyStoreDocument();
    }

    match /stock/{entryId} {
      allow read: if canReadStoreDocument();
      allow create, update, delete: if canOwnerModifyStoreDocument();
    }

    match /dailySummaries/{docId} {
      allow read: if canReadStoreDocument();
      allow create, update, delete: if canOwnerModifyStoreDocument();
    }

    match /activities/{activityId} {
      allow read: if canReadStoreDocument();
      allow create, update, delete: if canOwnerModifyStoreDocument();
    }

    match /closeouts/{closeoutId} {
      allow read: if canReadStoreDocument();
      allow create, update, delete: if canOwnerModifyStoreDocument();
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
