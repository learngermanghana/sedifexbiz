
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function inStore(storeId) {
      return request.auth != null
             && storeId in request.auth.token.stores;
    }

    function hasRole(storeId, allowed) {
      return inStore(storeId)
             && request.auth.token.roleByStore[storeId] in allowed;
    }

    match /products/{id} {
      function newProductPrice() {
        return request.resource.data.keys().hasAny(['price'])
               ? request.resource.data.price
               : resource.data.price;
      }

      function newProductHasStockCount() {
        return request.resource.data.keys().hasAny(['stockCount'])
               || resource.data.keys().hasAny(['stockCount']);
      }

      function newProductStockCount() {
        return request.resource.data.keys().hasAny(['stockCount'])
               ? request.resource.data.stockCount
               : resource.data.stockCount;
      }

      allow read: if inStore(resource.data.storeId);
      allow create: if hasRole(request.resource.data.storeId, ['owner','manager'])
                    && request.resource.data.price is number
                    && (!request.resource.data.keys().hasAny(['stockCount'])
                        || (request.resource.data.stockCount is number
                            && request.resource.data.stockCount >= 0));
      allow update: if hasRole(resource.data.storeId, ['owner','manager'])
                     && request.resource.data.storeId == resource.data.storeId
                     && newProductPrice() is number
                     && (!newProductHasStockCount()
                         || (newProductStockCount() is number
                             && newProductStockCount() >= 0));
      allow delete: if hasRole(resource.data.storeId, ['owner']);
    }

    match /ledger/{id} {
      allow read: if inStore(resource.data.storeId);
      allow write: if false; // write via Cloud Function only
    }

    match /sales/{id} {
      allow read: if inStore(resource.data.storeId);
      allow create: if hasRole(request.resource.data.storeId, ['owner','manager','cashier']);
      allow update: if hasRole(resource.data.storeId, ['owner','manager'])
                    && request.resource.data.storeId == resource.data.storeId;
      allow delete: if hasRole(resource.data.storeId, ['owner','manager']);
    }

    match /saleItems/{id} {
      allow read: if inStore(resource.data.storeId);
      allow write: if false; // write via Cloud Function only
    }

    match /expenses/{id} {
      allow read: if inStore(resource.data.storeId);
      allow create: if hasRole(request.resource.data.storeId, ['owner','manager','cashier']);
      allow update: if hasRole(resource.data.storeId, ['owner','manager'])
                    && request.resource.data.storeId == resource.data.storeId;
      allow delete: if hasRole(resource.data.storeId, ['owner','manager']);
    }

    match /customers/{id} {
      allow read: if inStore(resource.data.storeId);
      allow create: if hasRole(request.resource.data.storeId, ['owner','manager']);
      allow update: if hasRole(resource.data.storeId, ['owner','manager'])
                    && request.resource.data.storeId == resource.data.storeId;
      allow delete: if hasRole(resource.data.storeId, ['owner','manager']);
    }

    match /cashSessions/{id} {
      allow read: if inStore(resource.data.storeId);
      allow write: if hasRole(request.resource.data.storeId, ['owner','manager','cashier']);
    }

    match /storeUsers/{id} {
      allow read: if hasRole(resource.data.storeId, ['owner']);
      allow create: if hasRole(request.resource.data.storeId, ['owner']);
      allow update: if hasRole(resource.data.storeId, ['owner'])
                    && request.resource.data.storeId == resource.data.storeId;
      allow delete: if hasRole(resource.data.storeId, ['owner']);
    }

    match /sessions/{id} {
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow read, update, delete: if request.auth != null && resource.data.uid == request.auth.uid;
    }

    match /invites/{id} {
      allow read, create: if hasRole(request.resource.data.storeId, ['owner','manager']);
      allow update, delete: if hasRole(resource.data.storeId, ['owner','manager']);
    }
  }
}
