rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // -------- Helpers --------
    function isSignedIn() {
      return request.auth != null;
    }

    // Workspace doc getter
    function workspace(wid) {
      return get(/databases/$(database)/documents/workspaces/$(wid));
    }

    function normalizeKey(value) {
      return (value is string && value.size() > 0) ? value : null;
    }

    function normalizeStoreId(value) {
      return (value is string && value.size() > 0) ? value.lower() : null;
    }

    function normalizeRole(value) {
      return (value is string && value.size() > 0) ? value.lower() : null;
    }

    function workspaceStoreId(wid) {
      let data = workspace(wid).data;
      if (data == null) {
        return normalizeStoreId(wid);
      }

      let storeId = normalizeStoreId(data.storeId);
      if (storeId != null) {
        return storeId;
      }

      storeId = normalizeStoreId(data.workspaceSlug);
      if (storeId != null) {
        return storeId;
      }

      storeId = normalizeStoreId(data.slug);
      if (storeId != null) {
        return storeId;
      }

      return normalizeStoreId(wid);
    }

    function rosterEmailKey() {
      return (request.auth.token.email is string) ? request.auth.token.email.lower() : null;
    }

    function teamMemberExists(key) {
      return key != null &&
             exists(/databases/$(database)/documents/teamMembers/$(key));
    }

    function teamMemberDoc(key) {
      return get(/databases/$(database)/documents/teamMembers/$(key));
    }

    function rosterMemberMatchesStore(key, normalizedStoreId) {
      if (!(key != null && teamMemberExists(key))) {
        return false;
      }

      let memberDoc = teamMemberDoc(key);
      return normalizeStoreId(memberDoc.data.storeId) == normalizedStoreId;
    }

    function rosterMemberHasRole(key, normalizedStoreId, roles) {
      if (!(key != null && teamMemberExists(key))) {
        return false;
      }

      let memberDoc = teamMemberDoc(key);
      return normalizeStoreId(memberDoc.data.storeId) == normalizedStoreId &&
             roles.hasAny([normalizeRole(memberDoc.data.role)]);
    }

    // Caller is a member of this workspace when roster storeId matches
    function isMember(wid) {
      if (!isSignedIn()) {
        return false;
      }

      let normalizedStoreId = workspaceStoreId(wid);
      if (normalizedStoreId == null) {
        return false;
      }

      return rosterMemberMatchesStore(normalizeKey(request.auth.uid), normalizedStoreId) ||
             rosterMemberMatchesStore(rosterEmailKey(), normalizedStoreId);
    }

    // Role checks (membership doc should have { role: 'owner'|'admin'|'clerk' })
    function isAdmin(wid) {
      if (!isMember(wid)) {
        return false;
      }

      let normalizedStoreId = workspaceStoreId(wid);
      if (normalizedStoreId == null) {
        return false;
      }

      return rosterMemberHasRole(normalizeKey(request.auth.uid), normalizedStoreId, ['owner','admin']) ||
             rosterMemberHasRole(rosterEmailKey(), normalizedStoreId, ['owner','admin']);
    }
    function isOwnerOfWorkspace(wid) {
      return isSignedIn() &&
             workspace(wid).data.ownerId == request.auth.uid;
    }

    // Prevent moving docs across workspaces and make intent explicit
    function workspaceIdUnchangedOnUpdate(wid) {
      return resource.data.workspaceId == wid &&
             request.resource.data.workspaceId == wid;
    }

    function hasKeys(obj, keys) {
      return obj.keys().hasAll(keys);
    }

    // Validate ONLY fields that are being created/changed
    // Helpers that say: "if field present, it must satisfy ..."
    function strIfPresent(field) {
      return !(field in request.resource.data) || (request.resource.data[field] is string);
    }
    function numIfPresent(field, min) {
      return !(field in request.resource.data) ||
             (request.resource.data[field] is number && request.resource.data[field] >= min);
    }

    // List validator for request-time data; only checks if the field is being set/changed
    function validLinesIfPresent(field) {
      return !(field in request.resource.data) ||
        (
          request.resource.data[field] is list &&
          request.resource.data[field].all(l,
            l.keys().hasAll(['productId','qty']) &&
            l.productId is string &&
            l.qty is number && l.qty > 0
          )
        );
    }

    // ----- Entity validators -----
    // CREATE validations (require full shape on create)
    function validProductCreate(wid) {
      return hasKeys(request.resource.data, ['name','price','sku','workspaceId']) &&
             request.resource.data.workspaceId == wid &&
             request.resource.data.name is string &&
             request.resource.data.sku is string &&
             request.resource.data.price is number && request.resource.data.price >= 0;
    }
    // UPDATE validations (only validate fields that are changing)
    function validProductUpdate(wid) {
      return workspaceIdUnchangedOnUpdate(wid) &&
             strIfPresent('name') &&
             strIfPresent('sku') &&
             numIfPresent('price', 0);
    }

    function validCustomerCreate(wid) {
      return hasKeys(request.resource.data, ['name','workspaceId']) &&
             request.resource.data.workspaceId == wid &&
             request.resource.data.name is string;
    }
    function validCustomerUpdate(wid) {
      return workspaceIdUnchangedOnUpdate(wid) &&
             strIfPresent('name');
    }

    function validReceiptCreate(wid) {
      return hasKeys(request.resource.data, ['productId','qty','workspaceId']) &&
             request.resource.data.workspaceId == wid &&
             request.resource.data.productId is string &&
             request.resource.data.qty is number && request.resource.data.qty > 0;
    }
    function validReceiptUpdate(wid) {
      return workspaceIdUnchangedOnUpdate(wid) &&
             strIfPresent('productId') &&
             numIfPresent('qty', 0);
    }

    function validSaleCreate(wid) {
      return hasKeys(request.resource.data, ['lines','total','workspaceId']) &&
             request.resource.data.workspaceId == wid &&
             request.resource.data.total is number && request.resource.data.total >= 0 &&
             validLinesIfPresent('lines') && // on create lines must exist and be valid
             request.resource.data.lines.size() >= 1;
    }
    function validSaleUpdate(wid) {
      return workspaceIdUnchangedOnUpdate(wid) &&
             numIfPresent('total', 0) &&
             validLinesIfPresent('lines');
    }

    function validCloseDayCreate(wid) {
      return hasKeys(request.resource.data, ['openedAt','closedAt','workspaceId']) &&
             request.resource.data.workspaceId == wid &&
             request.resource.data.openedAt <= request.resource.data.closedAt;
    }
    function validCloseDayUpdate(wid) {
      return workspaceIdUnchangedOnUpdate(wid) &&
             // allow either/both timestamps to change, but keep ordering
             (
               !( 'openedAt' in request.resource.data ) ||
               !( 'closedAt' in request.resource.data ) ||
               request.resource.data.openedAt <= request.resource.data.closedAt
             );
    }

    // -------- Users (Account) --------
    match /users/{uid} {
      allow read, update: if isSignedIn() && request.auth.uid == uid;
      allow create:       if isSignedIn() && request.auth.uid == uid;
    }

    // -------- Workspaces (scoped data) --------
    match /workspaces/{wid} {
      allow read: if isMember(wid) || isOwnerOfWorkspace(wid);

      // Members:
      match /members/{memberUid} {
        allow read: if isMember(wid) || isOwnerOfWorkspace(wid);

        // Bootstrap rule:
        //  - The workspace owner can create their own membership (first member).
        //  - Admins can manage memberships.
        //  - A user may create their own membership if the workspace doc exposes joinOpen: true (optional flag).
        allow create: if isSignedIn() && request.auth.uid == memberUid && (
            isOwnerOfWorkspace(wid) ||
            isAdmin(wid) ||
            (workspace(wid).data.joinOpen == true)
        );

        // Update/delete by admins or the member themselves (tune as needed)
        allow update: if isAdmin(wid) || (isMember(wid) && request.auth.uid == memberUid);
        allow delete: if isAdmin(wid);
      }

      // Products
      match /products/{productId} {
        allow read: if isMember(wid);
        allow create: if isMember(wid) && validProductCreate(wid);
        allow update: if isMember(wid) && validProductUpdate(wid);
        allow delete: if isAdmin(wid); // tighten to admins
      }

      // Sales (Sell)
      match /sales/{saleId} {
        allow read: if isMember(wid);
        allow create: if isMember(wid) && validSaleCreate(wid);
        allow update: if isMember(wid) && validSaleUpdate(wid);
        allow delete: if isAdmin(wid);
      }

      // Receipts (Receive stock)
      match /receipts/{receiptId} {
        allow read: if isMember(wid);
        allow create: if isMember(wid) && validReceiptCreate(wid);
        allow update: if isMember(wid) && validReceiptUpdate(wid);
        allow delete: if isAdmin(wid);
      }

      // Customers
      match /customers/{customerId} {
        allow read: if isMember(wid);
        allow create: if isMember(wid) && validCustomerCreate(wid);
        allow update: if isMember(wid) && validCustomerUpdate(wid);
        allow delete: if isAdmin(wid);
      }

      // Close Day / Z report
      match /closeDays/{dayId} {
        allow read: if isMember(wid);
        allow create: if isMember(wid) && validCloseDayCreate(wid);
        allow update: if isMember(wid) && validCloseDayUpdate(wid);
        allow delete: if isAdmin(wid);
      }
    }

    // Legacy path you had
    match /teamMembers/{id} {
      allow read, write: if isSignedIn();
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
