rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isNonEmptyString(value) {
      return value is string && value.size() > 0;
    }

    function normalizedEmail() {
      if (!isSignedIn()) return null;
      let email = request.auth.token.email;
      if (!isNonEmptyString(email)) return null;
      return lower(email);
    }

    function loadMember(id) {
      return get(/databases/$(database)/documents/teamMembers/$(id));
    }

    function appendIfString(list, value) {
      return isNonEmptyString(value) ? list + [lower(value)] : list;
    }

    function workspaceIdsFromSnapshot(snapshot) {
      let ids = [];
      ids = appendIfString(ids, snapshot.data.storeId);
      ids = appendIfString(ids, snapshot.data.workspaceSlug);
      return ids;
    }

    function memberWorkspaceIds() {
      if (!isSignedIn()) return [];

      let ids = [];
      let uidSnapshot = loadMember(request.auth.uid);
      if (uidSnapshot.exists()) {
        ids = ids + workspaceIdsFromSnapshot(uidSnapshot);
      }

      let emailKey = normalizedEmail();
      if (emailKey != null) {
        let emailSnapshot = loadMember(emailKey);
        if (emailSnapshot.exists()) {
          ids = ids + workspaceIdsFromSnapshot(emailSnapshot);
        }
      }

      return ids;
    }

    function workspaceCandidateIds(resource) {
      let ids = appendIfString([], resource.id);
      ids = appendIfString(ids, resource.data.slug);
      ids = appendIfString(ids, resource.data.workspaceSlug);
      ids = appendIfString(ids, resource.data.storeId);
      return ids;
    }

    function isWorkspaceOwner(resource) {
      if (!isSignedIn()) return false;
      if (isNonEmptyString(resource.data.ownerId) && resource.data.ownerId == request.auth.uid) {
        return true;
      }

      let email = normalizedEmail();
      let ownerEmail = resource.data.ownerEmail;
      if (email != null && isNonEmptyString(ownerEmail) && lower(ownerEmail) == email) {
        return true;
      }

      return false;
    }

    function canReadWorkspace(resource) {
      if (isWorkspaceOwner(resource)) {
        return true;
      }

      let memberIds = memberWorkspaceIds();
      if (memberIds.size() == 0) return false;

      let workspaceIds = workspaceCandidateIds(resource);
      return workspaceIds.hasAny(memberIds);
    }

    // Workspace documents contain tenant-level billing + roster context.
    // Only allow reads for the workspace owner or rostered teammates.
    match /workspaces/{workspaceId} {
      allow get, list: if canReadWorkspace(resource);
      allow create, update, delete: if false;
    }

    match /teamMembers/{memberId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // All other collections remain readable/writable to signed-in users.
    match /{collection}/{documentId} {
      allow read, write: if isSignedIn() && collection != 'workspaces' && collection != 'teamMembers';

      match /{subcollection=**} {
        allow read, write: if isSignedIn() && collection != 'workspaces' && collection != 'teamMembers';
      }
    }
  }
}
